// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef IMF_DELIVERY_SCHEMA_H
#define IMF_DELIVERY_SCHEMA_H

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

#include <xsd/cxx/xml/dom/serialization-header.hxx>
#include <xsd/cxx/tree/serialization.hxx>
#include <xsd/cxx/tree/serialization/byte.hxx>
#include <xsd/cxx/tree/serialization/unsigned-byte.hxx>
#include <xsd/cxx/tree/serialization/short.hxx>
#include <xsd/cxx/tree/serialization/unsigned-short.hxx>
#include <xsd/cxx/tree/serialization/int.hxx>
#include <xsd/cxx/tree/serialization/unsigned-int.hxx>
#include <xsd/cxx/tree/serialization/long.hxx>
#include <xsd/cxx/tree/serialization/unsigned-long.hxx>
#include <xsd/cxx/tree/serialization/boolean.hxx>
#include <xsd/cxx/tree/serialization/float.hxx>
#include <xsd/cxx/tree/serialization/double.hxx>
#include <xsd/cxx/tree/serialization/decimal.hxx>

#include <xsd/cxx/tree/std-ostream-operators.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type Type;
  typedef ::xsd::cxx::tree::simple_type< char, Type > SimpleType;
  typedef ::xsd::cxx::tree::type Container;

  // 8-bit
  //
  typedef signed char Byte;
  typedef unsigned char UnsignedByte;

  // 16-bit
  //
  typedef short Short;
  typedef unsigned short UnsignedShort;

  // 32-bit
  //
  typedef int Int;
  typedef unsigned int UnsignedInt;

  // 64-bit
  //
  typedef long long Long;
  typedef unsigned long long UnsignedLong;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long Integer;
  typedef long long NonPositiveInteger;
  typedef unsigned long long NonNegativeInteger;
  typedef unsigned long long PositiveInteger;
  typedef long long NegativeInteger;

  // Boolean.
  //
  typedef bool Boolean;

  // Floating-point types.
  //
  typedef float Float;
  typedef double Double;
  typedef double Decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, SimpleType > String;
  typedef ::xsd::cxx::tree::normalized_string< char, String > NormalizedString;
  typedef ::xsd::cxx::tree::token< char, NormalizedString > Token;
  typedef ::xsd::cxx::tree::name< char, Token > Name;
  typedef ::xsd::cxx::tree::nmtoken< char, Token > Nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, SimpleType, Nmtoken > Nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, Name > Ncname;
  typedef ::xsd::cxx::tree::language< char, Token > Language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, Ncname > Id;
  typedef ::xsd::cxx::tree::idref< char, Ncname, Type > Idref;
  typedef ::xsd::cxx::tree::idrefs< char, SimpleType, Idref > Idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, SimpleType > Uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, SimpleType, Uri, Ncname > Qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > Buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, SimpleType > Base64Binary;
  typedef ::xsd::cxx::tree::hex_binary< char, SimpleType > HexBinary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone TimeZone;
  typedef ::xsd::cxx::tree::date< char, SimpleType > Date;
  typedef ::xsd::cxx::tree::date_time< char, SimpleType > DateTime;
  typedef ::xsd::cxx::tree::duration< char, SimpleType > Duration;
  typedef ::xsd::cxx::tree::gday< char, SimpleType > Gday;
  typedef ::xsd::cxx::tree::gmonth< char, SimpleType > Gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, SimpleType > GmonthDay;
  typedef ::xsd::cxx::tree::gyear< char, SimpleType > Gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, SimpleType > GyearMonth;
  typedef ::xsd::cxx::tree::time< char, SimpleType > Time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, Ncname > Entity;
  typedef ::xsd::cxx::tree::entities< char, SimpleType, Entity > Entities;

  typedef ::xsd::cxx::tree::content_order ContentOrder;
  // Namespace information and list stream. Used in
  // serialization functions.
  //
  typedef ::xsd::cxx::xml::dom::namespace_info< char > NamespaceInfo;
  typedef ::xsd::cxx::xml::dom::namespace_infomap< char > NamespaceInfomap;
  typedef ::xsd::cxx::tree::list_stream< char > ListStream;
  typedef ::xsd::cxx::tree::as_double< Double > AsDouble;
  typedef ::xsd::cxx::tree::as_decimal< Decimal > AsDecimal;
  typedef ::xsd::cxx::tree::facet Facet;

  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags Flags;
  typedef ::xsd::cxx::tree::properties< char > Properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity Severity;
  typedef ::xsd::cxx::tree::error< char > Error;
  typedef ::xsd::cxx::tree::diagnostics< char > Diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > Exception;
  typedef ::xsd::cxx::tree::bounds< char > Bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > DuplicateId;
  typedef ::xsd::cxx::tree::parsing< char > Parsing;
  typedef ::xsd::cxx::tree::expected_element< char > ExpectedElement;
  typedef ::xsd::cxx::tree::unexpected_element< char > UnexpectedElement;
  typedef ::xsd::cxx::tree::expected_attribute< char > ExpectedAttribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > UnexpectedEnumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > ExpectedTextContent;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > NoPrefixMapping;
  typedef ::xsd::cxx::tree::serialization< char > Serialization;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > ErrorHandler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const treeNodeKey = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
namespace dsl
{
  class DeliverableType;
  class VirtualTrackType;
  class CardinalityType;
  class DeliverySpecificationList;
  class DeliverableType_LabelType;
  class DeliverableType_CompositionPlaylistConstraintsType;
  class VirtualTrackType_SoundfieldGroupConfigurationType;
  class VirtualTrackType_AudioChannelMappingType;
  class VirtualTrackType_EssenceEncodingConstraintListType;
  class VirtualTrackType_ColorComponentsType;
  class VirtualTrackType_PixelBitDepthListType;
  class VirtualTrackType_ImageFrameWidthListType;
  class VirtualTrackType_ImageFrameHeightListType;
  class VirtualTrackType_FrameRateListType;
  class VirtualTrackType_SampleRateListType;
  class VirtualTrackType_TimelineComplexityType;
  class VirtualTrackType_ReferenceCardinalityType;
  class VirtualTrackType_namespaceType;
  class CardinalityType_MinItemType;
  class CardinalityType_MaxItemType;
  class DeliverySpecificationList_DeliverableListType;
  class DeliverableType_CompositionPlaylistConstraintsType_ApplicationIdentificationListType;
  class DeliverableType_CompositionPlaylistConstraintsType_VirtualTrackListType;
  class VirtualTrackType_SoundfieldGroupConfigurationType_MCATagSymbolType;
  class VirtualTrackType_AudioChannelMappingType_AudioChannelType;
  class VirtualTrackType_EssenceEncodingConstraintListType_EssenceEncodingConstraintType;
  class VirtualTrackType_TimelineComplexityType_SequenceType;
  class VirtualTrackType_TimelineComplexityType_typeType;
  class DeliverableType_CompositionPlaylistConstraintsType_ApplicationIdentificationListType_MatchTypeType;
  class DeliverableType_CompositionPlaylistConstraintsType_ApplicationIdentificationListType_ValueListType;
  class VirtualTrackType_AudioChannelMappingType_AudioChannelType_MCATagSymbolType;
  class VirtualTrackType_EssenceEncodingConstraintListType_EssenceEncodingConstraintType_PropertyListType;
  class VirtualTrackType_TimelineComplexityType_SequenceType_ResourceType;
  class VirtualTrackType_EssenceEncodingConstraintListType_EssenceEncodingConstraintType_PropertyListType_PropertyType;
}


#include <memory>    // ::std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include <xsd/cxx/tree/containers-wildcard.hxx>

#include "dcmlTypes.h"

namespace dsl
{
  class DeliverableType: public ::xml_schema::Type
  {
    public:
    // Id
    //
    typedef ::dcml::UUIDType IdType;
    typedef ::xsd::cxx::tree::traits< IdType, char > IdTraits;

    const IdType&
    getId () const;

    IdType&
    getId ();

    void
    setId (const IdType& x);

    void
    setId (::std::auto_ptr< IdType > p);

    // Label
    //
    typedef ::dsl::DeliverableType_LabelType LabelType;
    typedef ::xsd::cxx::tree::traits< LabelType, char > LabelTraits;

    const LabelType&
    getLabel () const;

    LabelType&
    getLabel ();

    void
    setLabel (const LabelType& x);

    void
    setLabel (::std::auto_ptr< LabelType > p);

    // CompositionPlaylistConstraints
    //
    typedef ::dsl::DeliverableType_CompositionPlaylistConstraintsType CompositionPlaylistConstraintsType;
    typedef ::xsd::cxx::tree::traits< CompositionPlaylistConstraintsType, char > CompositionPlaylistConstraintsTraits;

    const CompositionPlaylistConstraintsType&
    getCompositionPlaylistConstraints () const;

    CompositionPlaylistConstraintsType&
    getCompositionPlaylistConstraints ();

    void
    setCompositionPlaylistConstraints (const CompositionPlaylistConstraintsType& x);

    void
    setCompositionPlaylistConstraints (::std::auto_ptr< CompositionPlaylistConstraintsType > p);

    // Constructors.
    //
    DeliverableType (const IdType&,
                     const LabelType&,
                     const CompositionPlaylistConstraintsType&);

    DeliverableType (const IdType&,
                     const LabelType&,
                     ::std::auto_ptr< CompositionPlaylistConstraintsType >);

    DeliverableType (const ::xercesc::DOMElement& e,
                     ::xml_schema::Flags f = 0,
                     ::xml_schema::Container* c = 0);

    DeliverableType (const DeliverableType& x,
                     ::xml_schema::Flags f = 0,
                     ::xml_schema::Container* c = 0);

    virtual DeliverableType*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    DeliverableType&
    operator= (const DeliverableType& x);

    virtual 
    ~DeliverableType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ::xsd::cxx::tree::one< IdType > Id_;
    ::xsd::cxx::tree::one< LabelType > Label_;
    ::xsd::cxx::tree::one< CompositionPlaylistConstraintsType > CompositionPlaylistConstraints_;
  };

  class VirtualTrackType: public ::xml_schema::Type
  {
    public:
    // Kind
    //
    typedef ::dcml::UserTextType KindType;
    typedef ::xsd::cxx::tree::traits< KindType, char > KindTraits;

    const KindType&
    getKind () const;

    KindType&
    getKind ();

    void
    setKind (const KindType& x);

    void
    setKind (::std::auto_ptr< KindType > p);

    // SoundfieldGroupConfiguration
    //
    typedef ::dsl::VirtualTrackType_SoundfieldGroupConfigurationType SoundfieldGroupConfigurationType;
    typedef ::xsd::cxx::tree::optional< SoundfieldGroupConfigurationType > SoundfieldGroupConfigurationOptional;
    typedef ::xsd::cxx::tree::traits< SoundfieldGroupConfigurationType, char > SoundfieldGroupConfigurationTraits;

    const SoundfieldGroupConfigurationOptional&
    getSoundfieldGroupConfiguration () const;

    SoundfieldGroupConfigurationOptional&
    getSoundfieldGroupConfiguration ();

    void
    setSoundfieldGroupConfiguration (const SoundfieldGroupConfigurationType& x);

    void
    setSoundfieldGroupConfiguration (const SoundfieldGroupConfigurationOptional& x);

    void
    setSoundfieldGroupConfiguration (::std::auto_ptr< SoundfieldGroupConfigurationType > p);

    // AudioChannelMapping
    //
    typedef ::dsl::VirtualTrackType_AudioChannelMappingType AudioChannelMappingType;
    typedef ::xsd::cxx::tree::optional< AudioChannelMappingType > AudioChannelMappingOptional;
    typedef ::xsd::cxx::tree::traits< AudioChannelMappingType, char > AudioChannelMappingTraits;

    const AudioChannelMappingOptional&
    getAudioChannelMapping () const;

    AudioChannelMappingOptional&
    getAudioChannelMapping ();

    void
    setAudioChannelMapping (const AudioChannelMappingType& x);

    void
    setAudioChannelMapping (const AudioChannelMappingOptional& x);

    void
    setAudioChannelMapping (::std::auto_ptr< AudioChannelMappingType > p);

    // EssenceEncoding
    //
    typedef ::xml_schema::String EssenceEncodingType;
    typedef ::xsd::cxx::tree::traits< EssenceEncodingType, char > EssenceEncodingTraits;

    const EssenceEncodingType&
    getEssenceEncoding () const;

    EssenceEncodingType&
    getEssenceEncoding ();

    void
    setEssenceEncoding (const EssenceEncodingType& x);

    void
    setEssenceEncoding (::std::auto_ptr< EssenceEncodingType > p);

    // EssenceEncodingConstraintList
    //
    typedef ::dsl::VirtualTrackType_EssenceEncodingConstraintListType EssenceEncodingConstraintListType;
    typedef ::xsd::cxx::tree::optional< EssenceEncodingConstraintListType > EssenceEncodingConstraintListOptional;
    typedef ::xsd::cxx::tree::traits< EssenceEncodingConstraintListType, char > EssenceEncodingConstraintListTraits;

    const EssenceEncodingConstraintListOptional&
    getEssenceEncodingConstraintList () const;

    EssenceEncodingConstraintListOptional&
    getEssenceEncodingConstraintList ();

    void
    setEssenceEncodingConstraintList (const EssenceEncodingConstraintListType& x);

    void
    setEssenceEncodingConstraintList (const EssenceEncodingConstraintListOptional& x);

    void
    setEssenceEncodingConstraintList (::std::auto_ptr< EssenceEncodingConstraintListType > p);

    // Colorimetry
    //
    typedef ::xml_schema::String ColorimetryType;
    typedef ::xsd::cxx::tree::optional< ColorimetryType > ColorimetryOptional;
    typedef ::xsd::cxx::tree::traits< ColorimetryType, char > ColorimetryTraits;

    const ColorimetryOptional&
    getColorimetry () const;

    ColorimetryOptional&
    getColorimetry ();

    void
    setColorimetry (const ColorimetryType& x);

    void
    setColorimetry (const ColorimetryOptional& x);

    void
    setColorimetry (::std::auto_ptr< ColorimetryType > p);

    // Sampling
    //
    typedef ::xml_schema::String SamplingType;
    typedef ::xsd::cxx::tree::optional< SamplingType > SamplingOptional;
    typedef ::xsd::cxx::tree::traits< SamplingType, char > SamplingTraits;

    const SamplingOptional&
    getSampling () const;

    SamplingOptional&
    getSampling ();

    void
    setSampling (const SamplingType& x);

    void
    setSampling (const SamplingOptional& x);

    void
    setSampling (::std::auto_ptr< SamplingType > p);

    // Quantization
    //
    typedef ::xml_schema::String QuantizationType;
    typedef ::xsd::cxx::tree::optional< QuantizationType > QuantizationOptional;
    typedef ::xsd::cxx::tree::traits< QuantizationType, char > QuantizationTraits;

    const QuantizationOptional&
    getQuantization () const;

    QuantizationOptional&
    getQuantization ();

    void
    setQuantization (const QuantizationType& x);

    void
    setQuantization (const QuantizationOptional& x);

    void
    setQuantization (::std::auto_ptr< QuantizationType > p);

    // FrameStructure
    //
    typedef ::xml_schema::String FrameStructureType;
    typedef ::xsd::cxx::tree::optional< FrameStructureType > FrameStructureOptional;
    typedef ::xsd::cxx::tree::traits< FrameStructureType, char > FrameStructureTraits;

    const FrameStructureOptional&
    getFrameStructure () const;

    FrameStructureOptional&
    getFrameStructure ();

    void
    setFrameStructure (const FrameStructureType& x);

    void
    setFrameStructure (const FrameStructureOptional& x);

    void
    setFrameStructure (::std::auto_ptr< FrameStructureType > p);

    // Stereoscopy
    //
    typedef ::xml_schema::String StereoscopyType;
    typedef ::xsd::cxx::tree::optional< StereoscopyType > StereoscopyOptional;
    typedef ::xsd::cxx::tree::traits< StereoscopyType, char > StereoscopyTraits;

    const StereoscopyOptional&
    getStereoscopy () const;

    StereoscopyOptional&
    getStereoscopy ();

    void
    setStereoscopy (const StereoscopyType& x);

    void
    setStereoscopy (const StereoscopyOptional& x);

    void
    setStereoscopy (::std::auto_ptr< StereoscopyType > p);

    // ColorComponents
    //
    typedef ::dsl::VirtualTrackType_ColorComponentsType ColorComponentsType;
    typedef ::xsd::cxx::tree::optional< ColorComponentsType > ColorComponentsOptional;
    typedef ::xsd::cxx::tree::traits< ColorComponentsType, char > ColorComponentsTraits;

    const ColorComponentsOptional&
    getColorComponents () const;

    ColorComponentsOptional&
    getColorComponents ();

    void
    setColorComponents (const ColorComponentsType& x);

    void
    setColorComponents (const ColorComponentsOptional& x);

    void
    setColorComponents (::std::auto_ptr< ColorComponentsType > p);

    // PixelBitDepthList
    //
    typedef ::dsl::VirtualTrackType_PixelBitDepthListType PixelBitDepthListType;
    typedef ::xsd::cxx::tree::optional< PixelBitDepthListType > PixelBitDepthListOptional;
    typedef ::xsd::cxx::tree::traits< PixelBitDepthListType, char > PixelBitDepthListTraits;

    const PixelBitDepthListOptional&
    getPixelBitDepthList () const;

    PixelBitDepthListOptional&
    getPixelBitDepthList ();

    void
    setPixelBitDepthList (const PixelBitDepthListType& x);

    void
    setPixelBitDepthList (const PixelBitDepthListOptional& x);

    void
    setPixelBitDepthList (::std::auto_ptr< PixelBitDepthListType > p);

    // ImageFrameWidthList
    //
    typedef ::dsl::VirtualTrackType_ImageFrameWidthListType ImageFrameWidthListType;
    typedef ::xsd::cxx::tree::optional< ImageFrameWidthListType > ImageFrameWidthListOptional;
    typedef ::xsd::cxx::tree::traits< ImageFrameWidthListType, char > ImageFrameWidthListTraits;

    const ImageFrameWidthListOptional&
    getImageFrameWidthList () const;

    ImageFrameWidthListOptional&
    getImageFrameWidthList ();

    void
    setImageFrameWidthList (const ImageFrameWidthListType& x);

    void
    setImageFrameWidthList (const ImageFrameWidthListOptional& x);

    void
    setImageFrameWidthList (::std::auto_ptr< ImageFrameWidthListType > p);

    // ImageFrameHeightList
    //
    typedef ::dsl::VirtualTrackType_ImageFrameHeightListType ImageFrameHeightListType;
    typedef ::xsd::cxx::tree::optional< ImageFrameHeightListType > ImageFrameHeightListOptional;
    typedef ::xsd::cxx::tree::traits< ImageFrameHeightListType, char > ImageFrameHeightListTraits;

    const ImageFrameHeightListOptional&
    getImageFrameHeightList () const;

    ImageFrameHeightListOptional&
    getImageFrameHeightList ();

    void
    setImageFrameHeightList (const ImageFrameHeightListType& x);

    void
    setImageFrameHeightList (const ImageFrameHeightListOptional& x);

    void
    setImageFrameHeightList (::std::auto_ptr< ImageFrameHeightListType > p);

    // FrameRateList
    //
    typedef ::dsl::VirtualTrackType_FrameRateListType FrameRateListType;
    typedef ::xsd::cxx::tree::optional< FrameRateListType > FrameRateListOptional;
    typedef ::xsd::cxx::tree::traits< FrameRateListType, char > FrameRateListTraits;

    const FrameRateListOptional&
    getFrameRateList () const;

    FrameRateListOptional&
    getFrameRateList ();

    void
    setFrameRateList (const FrameRateListType& x);

    void
    setFrameRateList (const FrameRateListOptional& x);

    void
    setFrameRateList (::std::auto_ptr< FrameRateListType > p);

    // SampleRateList
    //
    typedef ::dsl::VirtualTrackType_SampleRateListType SampleRateListType;
    typedef ::xsd::cxx::tree::optional< SampleRateListType > SampleRateListOptional;
    typedef ::xsd::cxx::tree::traits< SampleRateListType, char > SampleRateListTraits;

    const SampleRateListOptional&
    getSampleRateList () const;

    SampleRateListOptional&
    getSampleRateList ();

    void
    setSampleRateList (const SampleRateListType& x);

    void
    setSampleRateList (const SampleRateListOptional& x);

    void
    setSampleRateList (::std::auto_ptr< SampleRateListType > p);

    // TimelineComplexity
    //
    typedef ::dsl::VirtualTrackType_TimelineComplexityType TimelineComplexityType;
    typedef ::xsd::cxx::tree::sequence< TimelineComplexityType > TimelineComplexitySequence;
    typedef TimelineComplexitySequence::iterator TimelineComplexityIterator;
    typedef TimelineComplexitySequence::const_iterator TimelineComplexityConstIterator;
    typedef ::xsd::cxx::tree::traits< TimelineComplexityType, char > TimelineComplexityTraits;

    const TimelineComplexitySequence&
    getTimelineComplexity () const;

    TimelineComplexitySequence&
    getTimelineComplexity ();

    void
    setTimelineComplexity (const TimelineComplexitySequence& s);

    // ReferenceCardinality
    //
    typedef ::dsl::VirtualTrackType_ReferenceCardinalityType ReferenceCardinalityType;
    typedef ::xsd::cxx::tree::optional< ReferenceCardinalityType > ReferenceCardinalityOptional;
    typedef ::xsd::cxx::tree::traits< ReferenceCardinalityType, char > ReferenceCardinalityTraits;

    const ReferenceCardinalityOptional&
    getReferenceCardinality () const;

    ReferenceCardinalityOptional&
    getReferenceCardinality ();

    void
    setReferenceCardinality (const ReferenceCardinalityType& x);

    void
    setReferenceCardinality (const ReferenceCardinalityOptional& x);

    void
    setReferenceCardinality (::std::auto_ptr< ReferenceCardinalityType > p);

    // namespace
    //
    typedef ::dsl::VirtualTrackType_namespaceType NamespaceType;
    typedef ::xsd::cxx::tree::optional< NamespaceType > NamespaceOptional;
    typedef ::xsd::cxx::tree::traits< NamespaceType, char > NamespaceTraits;

    const NamespaceOptional&
    getNamespace () const;

    NamespaceOptional&
    getNamespace ();

    void
    setNamespace (const NamespaceType& x);

    void
    setNamespace (const NamespaceOptional& x);

    void
    setNamespace (::std::auto_ptr< NamespaceType > p);

    // Constructors.
    //
    VirtualTrackType (const KindType&,
                      const EssenceEncodingType&);

    VirtualTrackType (::std::auto_ptr< KindType >,
                      const EssenceEncodingType&);

    VirtualTrackType (const ::xercesc::DOMElement& e,
                      ::xml_schema::Flags f = 0,
                      ::xml_schema::Container* c = 0);

    VirtualTrackType (const VirtualTrackType& x,
                      ::xml_schema::Flags f = 0,
                      ::xml_schema::Container* c = 0);

    virtual VirtualTrackType*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    VirtualTrackType&
    operator= (const VirtualTrackType& x);

    virtual 
    ~VirtualTrackType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ::xsd::cxx::tree::one< KindType > Kind_;
    SoundfieldGroupConfigurationOptional SoundfieldGroupConfiguration_;
    AudioChannelMappingOptional AudioChannelMapping_;
    ::xsd::cxx::tree::one< EssenceEncodingType > EssenceEncoding_;
    EssenceEncodingConstraintListOptional EssenceEncodingConstraintList_;
    ColorimetryOptional Colorimetry_;
    SamplingOptional Sampling_;
    QuantizationOptional Quantization_;
    FrameStructureOptional FrameStructure_;
    StereoscopyOptional Stereoscopy_;
    ColorComponentsOptional ColorComponents_;
    PixelBitDepthListOptional PixelBitDepthList_;
    ImageFrameWidthListOptional ImageFrameWidthList_;
    ImageFrameHeightListOptional ImageFrameHeightList_;
    FrameRateListOptional FrameRateList_;
    SampleRateListOptional SampleRateList_;
    TimelineComplexitySequence TimelineComplexity_;
    ReferenceCardinalityOptional ReferenceCardinality_;
    NamespaceOptional namespace__;
  };

  class CardinalityType: public ::xml_schema::Type
  {
    public:
    // MinItem
    //
    typedef ::dsl::CardinalityType_MinItemType MinItemType;
    typedef ::xsd::cxx::tree::traits< MinItemType, char > MinItemTraits;

    const MinItemType&
    getMinItem () const;

    MinItemType&
    getMinItem ();

    void
    setMinItem (const MinItemType& x);

    void
    setMinItem (::std::auto_ptr< MinItemType > p);

    // MaxItem
    //
    typedef ::dsl::CardinalityType_MaxItemType MaxItemType;
    typedef ::xsd::cxx::tree::traits< MaxItemType, char > MaxItemTraits;

    const MaxItemType&
    getMaxItem () const;

    MaxItemType&
    getMaxItem ();

    void
    setMaxItem (const MaxItemType& x);

    void
    setMaxItem (::std::auto_ptr< MaxItemType > p);

    // Constructors.
    //
    CardinalityType (const MinItemType&,
                     const MaxItemType&);

    CardinalityType (const ::xercesc::DOMElement& e,
                     ::xml_schema::Flags f = 0,
                     ::xml_schema::Container* c = 0);

    CardinalityType (const CardinalityType& x,
                     ::xml_schema::Flags f = 0,
                     ::xml_schema::Container* c = 0);

    virtual CardinalityType*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    CardinalityType&
    operator= (const CardinalityType& x);

    virtual 
    ~CardinalityType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ::xsd::cxx::tree::one< MinItemType > MinItem_;
    ::xsd::cxx::tree::one< MaxItemType > MaxItem_;
  };

  class DeliverySpecificationList: public ::xml_schema::Type
  {
    public:
    // Id
    //
    typedef ::dcml::UUIDType IdType;
    typedef ::xsd::cxx::tree::traits< IdType, char > IdTraits;

    const IdType&
    getId () const;

    IdType&
    getId ();

    void
    setId (const IdType& x);

    void
    setId (::std::auto_ptr< IdType > p);

    // AnnotationText
    //
    typedef ::dcml::UserTextType AnnotationTextType;
    typedef ::xsd::cxx::tree::optional< AnnotationTextType > AnnotationTextOptional;
    typedef ::xsd::cxx::tree::traits< AnnotationTextType, char > AnnotationTextTraits;

    const AnnotationTextOptional&
    getAnnotationText () const;

    AnnotationTextOptional&
    getAnnotationText ();

    void
    setAnnotationText (const AnnotationTextType& x);

    void
    setAnnotationText (const AnnotationTextOptional& x);

    void
    setAnnotationText (::std::auto_ptr< AnnotationTextType > p);

    // IssueDate
    //
    typedef ::xml_schema::DateTime IssueDateType;
    typedef ::xsd::cxx::tree::traits< IssueDateType, char > IssueDateTraits;

    const IssueDateType&
    getIssueDate () const;

    IssueDateType&
    getIssueDate ();

    void
    setIssueDate (const IssueDateType& x);

    void
    setIssueDate (::std::auto_ptr< IssueDateType > p);

    // Issuer
    //
    typedef ::dcml::UserTextType IssuerType;
    typedef ::xsd::cxx::tree::optional< IssuerType > IssuerOptional;
    typedef ::xsd::cxx::tree::traits< IssuerType, char > IssuerTraits;

    const IssuerOptional&
    getIssuer () const;

    IssuerOptional&
    getIssuer ();

    void
    setIssuer (const IssuerType& x);

    void
    setIssuer (const IssuerOptional& x);

    void
    setIssuer (::std::auto_ptr< IssuerType > p);

    // Creator
    //
    typedef ::dcml::UserTextType CreatorType;
    typedef ::xsd::cxx::tree::optional< CreatorType > CreatorOptional;
    typedef ::xsd::cxx::tree::traits< CreatorType, char > CreatorTraits;

    const CreatorOptional&
    getCreator () const;

    CreatorOptional&
    getCreator ();

    void
    setCreator (const CreatorType& x);

    void
    setCreator (const CreatorOptional& x);

    void
    setCreator (::std::auto_ptr< CreatorType > p);

    // DeliverableList
    //
    typedef ::dsl::DeliverySpecificationList_DeliverableListType DeliverableListType;
    typedef ::xsd::cxx::tree::traits< DeliverableListType, char > DeliverableListTraits;

    const DeliverableListType&
    getDeliverableList () const;

    DeliverableListType&
    getDeliverableList ();

    void
    setDeliverableList (const DeliverableListType& x);

    void
    setDeliverableList (::std::auto_ptr< DeliverableListType > p);

    // Constructors.
    //
    DeliverySpecificationList (const IdType&,
                               const IssueDateType&,
                               const DeliverableListType&);

    DeliverySpecificationList (const IdType&,
                               const IssueDateType&,
                               ::std::auto_ptr< DeliverableListType >);

    DeliverySpecificationList (const ::xercesc::DOMElement& e,
                               ::xml_schema::Flags f = 0,
                               ::xml_schema::Container* c = 0);

    DeliverySpecificationList (const DeliverySpecificationList& x,
                               ::xml_schema::Flags f = 0,
                               ::xml_schema::Container* c = 0);

    virtual DeliverySpecificationList*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    DeliverySpecificationList&
    operator= (const DeliverySpecificationList& x);

    virtual 
    ~DeliverySpecificationList ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ::xsd::cxx::tree::one< IdType > Id_;
    AnnotationTextOptional AnnotationText_;
    ::xsd::cxx::tree::one< IssueDateType > IssueDate_;
    IssuerOptional Issuer_;
    CreatorOptional Creator_;
    ::xsd::cxx::tree::one< DeliverableListType > DeliverableList_;
  };

  class DeliverableType_LabelType: public ::xml_schema::String
  {
    public:
    // Constructors.
    //
    DeliverableType_LabelType ();

    DeliverableType_LabelType (const char*);

    DeliverableType_LabelType (const ::std::string&);

    DeliverableType_LabelType (const ::xml_schema::String&);

    DeliverableType_LabelType (const ::xercesc::DOMElement& e,
                               ::xml_schema::Flags f = 0,
                               ::xml_schema::Container* c = 0);

    DeliverableType_LabelType (const ::xercesc::DOMAttr& a,
                               ::xml_schema::Flags f = 0,
                               ::xml_schema::Container* c = 0);

    DeliverableType_LabelType (const ::std::string& s,
                               const ::xercesc::DOMElement* e,
                               ::xml_schema::Flags f = 0,
                               ::xml_schema::Container* c = 0);

    DeliverableType_LabelType (const DeliverableType_LabelType& x,
                               ::xml_schema::Flags f = 0,
                               ::xml_schema::Container* c = 0);

    virtual DeliverableType_LabelType*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    virtual 
    ~DeliverableType_LabelType ();
  };

  class DeliverableType_CompositionPlaylistConstraintsType: public ::xml_schema::Type
  {
    public:
    // OwnerId
    //
    typedef ::xml_schema::Uri OwnerIdType;
    typedef ::xsd::cxx::tree::traits< OwnerIdType, char > OwnerIdTraits;

    const OwnerIdType&
    getOwnerId () const;

    OwnerIdType&
    getOwnerId ();

    void
    setOwnerId (const OwnerIdType& x);

    void
    setOwnerId (::std::auto_ptr< OwnerIdType > p);

    // ApplicationIdentificationList
    //
    typedef ::dsl::DeliverableType_CompositionPlaylistConstraintsType_ApplicationIdentificationListType ApplicationIdentificationListType;
    typedef ::xsd::cxx::tree::optional< ApplicationIdentificationListType > ApplicationIdentificationListOptional;
    typedef ::xsd::cxx::tree::traits< ApplicationIdentificationListType, char > ApplicationIdentificationListTraits;

    const ApplicationIdentificationListOptional&
    getApplicationIdentificationList () const;

    ApplicationIdentificationListOptional&
    getApplicationIdentificationList ();

    void
    setApplicationIdentificationList (const ApplicationIdentificationListType& x);

    void
    setApplicationIdentificationList (const ApplicationIdentificationListOptional& x);

    void
    setApplicationIdentificationList (::std::auto_ptr< ApplicationIdentificationListType > p);

    // ApplicationIdentification
    //
    typedef ::xml_schema::Uri ApplicationIdentificationType;
    typedef ::xsd::cxx::tree::optional< ApplicationIdentificationType > ApplicationIdentificationOptional;
    typedef ::xsd::cxx::tree::traits< ApplicationIdentificationType, char > ApplicationIdentificationTraits;

    const ApplicationIdentificationOptional&
    getApplicationIdentification () const;

    ApplicationIdentificationOptional&
    getApplicationIdentification ();

    void
    setApplicationIdentification (const ApplicationIdentificationType& x);

    void
    setApplicationIdentification (const ApplicationIdentificationOptional& x);

    void
    setApplicationIdentification (::std::auto_ptr< ApplicationIdentificationType > p);

    // VirtualTrackList
    //
    typedef ::dsl::DeliverableType_CompositionPlaylistConstraintsType_VirtualTrackListType VirtualTrackListType;
    typedef ::xsd::cxx::tree::traits< VirtualTrackListType, char > VirtualTrackListTraits;

    const VirtualTrackListType&
    getVirtualTrackList () const;

    VirtualTrackListType&
    getVirtualTrackList ();

    void
    setVirtualTrackList (const VirtualTrackListType& x);

    void
    setVirtualTrackList (::std::auto_ptr< VirtualTrackListType > p);

    // Constructors.
    //
    DeliverableType_CompositionPlaylistConstraintsType (const OwnerIdType&,
                                                        const VirtualTrackListType&);

    DeliverableType_CompositionPlaylistConstraintsType (const OwnerIdType&,
                                                        ::std::auto_ptr< VirtualTrackListType >);

    DeliverableType_CompositionPlaylistConstraintsType (const ::xercesc::DOMElement& e,
                                                        ::xml_schema::Flags f = 0,
                                                        ::xml_schema::Container* c = 0);

    DeliverableType_CompositionPlaylistConstraintsType (const DeliverableType_CompositionPlaylistConstraintsType& x,
                                                        ::xml_schema::Flags f = 0,
                                                        ::xml_schema::Container* c = 0);

    virtual DeliverableType_CompositionPlaylistConstraintsType*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    DeliverableType_CompositionPlaylistConstraintsType&
    operator= (const DeliverableType_CompositionPlaylistConstraintsType& x);

    virtual 
    ~DeliverableType_CompositionPlaylistConstraintsType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ::xsd::cxx::tree::one< OwnerIdType > OwnerId_;
    ApplicationIdentificationListOptional ApplicationIdentificationList_;
    ApplicationIdentificationOptional ApplicationIdentification_;
    ::xsd::cxx::tree::one< VirtualTrackListType > VirtualTrackList_;
  };

  class VirtualTrackType_SoundfieldGroupConfigurationType: public ::xml_schema::Type
  {
    public:
    // MCATagSymbol
    //
    typedef ::dsl::VirtualTrackType_SoundfieldGroupConfigurationType_MCATagSymbolType MCATagSymbolType;
    typedef ::xsd::cxx::tree::traits< MCATagSymbolType, char > MCATagSymbolTraits;

    const MCATagSymbolType&
    getMCATagSymbol () const;

    MCATagSymbolType&
    getMCATagSymbol ();

    void
    setMCATagSymbol (const MCATagSymbolType& x);

    void
    setMCATagSymbol (::std::auto_ptr< MCATagSymbolType > p);

    // Constructors.
    //
    VirtualTrackType_SoundfieldGroupConfigurationType (const MCATagSymbolType&);

    VirtualTrackType_SoundfieldGroupConfigurationType (const ::xercesc::DOMElement& e,
                                                       ::xml_schema::Flags f = 0,
                                                       ::xml_schema::Container* c = 0);

    VirtualTrackType_SoundfieldGroupConfigurationType (const VirtualTrackType_SoundfieldGroupConfigurationType& x,
                                                       ::xml_schema::Flags f = 0,
                                                       ::xml_schema::Container* c = 0);

    virtual VirtualTrackType_SoundfieldGroupConfigurationType*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    VirtualTrackType_SoundfieldGroupConfigurationType&
    operator= (const VirtualTrackType_SoundfieldGroupConfigurationType& x);

    virtual 
    ~VirtualTrackType_SoundfieldGroupConfigurationType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ::xsd::cxx::tree::one< MCATagSymbolType > MCATagSymbol_;
  };

  class VirtualTrackType_AudioChannelMappingType: public ::xml_schema::Type
  {
    public:
    // AudioChannel
    //
    typedef ::dsl::VirtualTrackType_AudioChannelMappingType_AudioChannelType AudioChannelType;
    typedef ::xsd::cxx::tree::sequence< AudioChannelType > AudioChannelSequence;
    typedef AudioChannelSequence::iterator AudioChannelIterator;
    typedef AudioChannelSequence::const_iterator AudioChannelConstIterator;
    typedef ::xsd::cxx::tree::traits< AudioChannelType, char > AudioChannelTraits;

    const AudioChannelSequence&
    getAudioChannel () const;

    AudioChannelSequence&
    getAudioChannel ();

    void
    setAudioChannel (const AudioChannelSequence& s);

    // Constructors.
    //
    VirtualTrackType_AudioChannelMappingType ();

    VirtualTrackType_AudioChannelMappingType (const ::xercesc::DOMElement& e,
                                              ::xml_schema::Flags f = 0,
                                              ::xml_schema::Container* c = 0);

    VirtualTrackType_AudioChannelMappingType (const VirtualTrackType_AudioChannelMappingType& x,
                                              ::xml_schema::Flags f = 0,
                                              ::xml_schema::Container* c = 0);

    virtual VirtualTrackType_AudioChannelMappingType*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    VirtualTrackType_AudioChannelMappingType&
    operator= (const VirtualTrackType_AudioChannelMappingType& x);

    virtual 
    ~VirtualTrackType_AudioChannelMappingType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    AudioChannelSequence AudioChannel_;
  };

  class VirtualTrackType_EssenceEncodingConstraintListType: public ::xml_schema::Type
  {
    public:
    // EssenceEncodingConstraint
    //
    typedef ::dsl::VirtualTrackType_EssenceEncodingConstraintListType_EssenceEncodingConstraintType EssenceEncodingConstraintType;
    typedef ::xsd::cxx::tree::sequence< EssenceEncodingConstraintType > EssenceEncodingConstraintSequence;
    typedef EssenceEncodingConstraintSequence::iterator EssenceEncodingConstraintIterator;
    typedef EssenceEncodingConstraintSequence::const_iterator EssenceEncodingConstraintConstIterator;
    typedef ::xsd::cxx::tree::traits< EssenceEncodingConstraintType, char > EssenceEncodingConstraintTraits;

    const EssenceEncodingConstraintSequence&
    getEssenceEncodingConstraint () const;

    EssenceEncodingConstraintSequence&
    getEssenceEncodingConstraint ();

    void
    setEssenceEncodingConstraint (const EssenceEncodingConstraintSequence& s);

    // scope
    //
    typedef ::xml_schema::Uri ScopeType;
    typedef ::xsd::cxx::tree::traits< ScopeType, char > ScopeTraits;

    const ScopeType&
    getScope () const;

    ScopeType&
    getScope ();

    void
    setScope (const ScopeType& x);

    void
    setScope (::std::auto_ptr< ScopeType > p);

    // Constructors.
    //
    VirtualTrackType_EssenceEncodingConstraintListType (const ScopeType&);

    VirtualTrackType_EssenceEncodingConstraintListType (const ::xercesc::DOMElement& e,
                                                        ::xml_schema::Flags f = 0,
                                                        ::xml_schema::Container* c = 0);

    VirtualTrackType_EssenceEncodingConstraintListType (const VirtualTrackType_EssenceEncodingConstraintListType& x,
                                                        ::xml_schema::Flags f = 0,
                                                        ::xml_schema::Container* c = 0);

    virtual VirtualTrackType_EssenceEncodingConstraintListType*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    VirtualTrackType_EssenceEncodingConstraintListType&
    operator= (const VirtualTrackType_EssenceEncodingConstraintListType& x);

    virtual 
    ~VirtualTrackType_EssenceEncodingConstraintListType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    EssenceEncodingConstraintSequence EssenceEncodingConstraint_;
    ::xsd::cxx::tree::one< ScopeType > scope_;
  };

  class VirtualTrackType_ColorComponentsType: public ::xml_schema::String
  {
    public:
    // Constructors.
    //
    VirtualTrackType_ColorComponentsType ();

    VirtualTrackType_ColorComponentsType (const char*);

    VirtualTrackType_ColorComponentsType (const ::std::string&);

    VirtualTrackType_ColorComponentsType (const ::xml_schema::String&);

    VirtualTrackType_ColorComponentsType (const ::xercesc::DOMElement& e,
                                          ::xml_schema::Flags f = 0,
                                          ::xml_schema::Container* c = 0);

    VirtualTrackType_ColorComponentsType (const ::xercesc::DOMAttr& a,
                                          ::xml_schema::Flags f = 0,
                                          ::xml_schema::Container* c = 0);

    VirtualTrackType_ColorComponentsType (const ::std::string& s,
                                          const ::xercesc::DOMElement* e,
                                          ::xml_schema::Flags f = 0,
                                          ::xml_schema::Container* c = 0);

    VirtualTrackType_ColorComponentsType (const VirtualTrackType_ColorComponentsType& x,
                                          ::xml_schema::Flags f = 0,
                                          ::xml_schema::Container* c = 0);

    virtual VirtualTrackType_ColorComponentsType*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    virtual 
    ~VirtualTrackType_ColorComponentsType ();
  };

  class VirtualTrackType_PixelBitDepthListType: public ::xml_schema::Type
  {
    public:
    // PixelBitDepth
    //
    typedef ::xml_schema::Integer PixelBitDepthType;
    typedef ::xsd::cxx::tree::sequence< PixelBitDepthType > PixelBitDepthSequence;
    typedef PixelBitDepthSequence::iterator PixelBitDepthIterator;
    typedef PixelBitDepthSequence::const_iterator PixelBitDepthConstIterator;
    typedef ::xsd::cxx::tree::traits< PixelBitDepthType, char > PixelBitDepthTraits;

    const PixelBitDepthSequence&
    getPixelBitDepth () const;

    PixelBitDepthSequence&
    getPixelBitDepth ();

    void
    setPixelBitDepth (const PixelBitDepthSequence& s);

    // Constructors.
    //
    VirtualTrackType_PixelBitDepthListType ();

    VirtualTrackType_PixelBitDepthListType (const ::xercesc::DOMElement& e,
                                            ::xml_schema::Flags f = 0,
                                            ::xml_schema::Container* c = 0);

    VirtualTrackType_PixelBitDepthListType (const VirtualTrackType_PixelBitDepthListType& x,
                                            ::xml_schema::Flags f = 0,
                                            ::xml_schema::Container* c = 0);

    virtual VirtualTrackType_PixelBitDepthListType*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    VirtualTrackType_PixelBitDepthListType&
    operator= (const VirtualTrackType_PixelBitDepthListType& x);

    virtual 
    ~VirtualTrackType_PixelBitDepthListType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    PixelBitDepthSequence PixelBitDepth_;
  };

  class VirtualTrackType_ImageFrameWidthListType: public ::xml_schema::Type
  {
    public:
    // ImageFrameWidth
    //
    typedef ::xml_schema::Integer ImageFrameWidthType;
    typedef ::xsd::cxx::tree::sequence< ImageFrameWidthType > ImageFrameWidthSequence;
    typedef ImageFrameWidthSequence::iterator ImageFrameWidthIterator;
    typedef ImageFrameWidthSequence::const_iterator ImageFrameWidthConstIterator;
    typedef ::xsd::cxx::tree::traits< ImageFrameWidthType, char > ImageFrameWidthTraits;

    const ImageFrameWidthSequence&
    getImageFrameWidth () const;

    ImageFrameWidthSequence&
    getImageFrameWidth ();

    void
    setImageFrameWidth (const ImageFrameWidthSequence& s);

    // Constructors.
    //
    VirtualTrackType_ImageFrameWidthListType ();

    VirtualTrackType_ImageFrameWidthListType (const ::xercesc::DOMElement& e,
                                              ::xml_schema::Flags f = 0,
                                              ::xml_schema::Container* c = 0);

    VirtualTrackType_ImageFrameWidthListType (const VirtualTrackType_ImageFrameWidthListType& x,
                                              ::xml_schema::Flags f = 0,
                                              ::xml_schema::Container* c = 0);

    virtual VirtualTrackType_ImageFrameWidthListType*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    VirtualTrackType_ImageFrameWidthListType&
    operator= (const VirtualTrackType_ImageFrameWidthListType& x);

    virtual 
    ~VirtualTrackType_ImageFrameWidthListType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ImageFrameWidthSequence ImageFrameWidth_;
  };

  class VirtualTrackType_ImageFrameHeightListType: public ::xml_schema::Type
  {
    public:
    // ImageFrameHeight
    //
    typedef ::xml_schema::Integer ImageFrameHeightType;
    typedef ::xsd::cxx::tree::sequence< ImageFrameHeightType > ImageFrameHeightSequence;
    typedef ImageFrameHeightSequence::iterator ImageFrameHeightIterator;
    typedef ImageFrameHeightSequence::const_iterator ImageFrameHeightConstIterator;
    typedef ::xsd::cxx::tree::traits< ImageFrameHeightType, char > ImageFrameHeightTraits;

    const ImageFrameHeightSequence&
    getImageFrameHeight () const;

    ImageFrameHeightSequence&
    getImageFrameHeight ();

    void
    setImageFrameHeight (const ImageFrameHeightSequence& s);

    // Constructors.
    //
    VirtualTrackType_ImageFrameHeightListType ();

    VirtualTrackType_ImageFrameHeightListType (const ::xercesc::DOMElement& e,
                                               ::xml_schema::Flags f = 0,
                                               ::xml_schema::Container* c = 0);

    VirtualTrackType_ImageFrameHeightListType (const VirtualTrackType_ImageFrameHeightListType& x,
                                               ::xml_schema::Flags f = 0,
                                               ::xml_schema::Container* c = 0);

    virtual VirtualTrackType_ImageFrameHeightListType*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    VirtualTrackType_ImageFrameHeightListType&
    operator= (const VirtualTrackType_ImageFrameHeightListType& x);

    virtual 
    ~VirtualTrackType_ImageFrameHeightListType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ImageFrameHeightSequence ImageFrameHeight_;
  };

  class VirtualTrackType_FrameRateListType: public ::xml_schema::Type
  {
    public:
    // FrameRate
    //
    typedef ::dcml::RationalType FrameRateType;
    typedef ::xsd::cxx::tree::sequence< FrameRateType > FrameRateSequence;
    typedef FrameRateSequence::iterator FrameRateIterator;
    typedef FrameRateSequence::const_iterator FrameRateConstIterator;
    typedef ::xsd::cxx::tree::traits< FrameRateType, char > FrameRateTraits;

    const FrameRateSequence&
    getFrameRate () const;

    FrameRateSequence&
    getFrameRate ();

    void
    setFrameRate (const FrameRateSequence& s);

    // Constructors.
    //
    VirtualTrackType_FrameRateListType ();

    VirtualTrackType_FrameRateListType (const ::xercesc::DOMElement& e,
                                        ::xml_schema::Flags f = 0,
                                        ::xml_schema::Container* c = 0);

    VirtualTrackType_FrameRateListType (const VirtualTrackType_FrameRateListType& x,
                                        ::xml_schema::Flags f = 0,
                                        ::xml_schema::Container* c = 0);

    virtual VirtualTrackType_FrameRateListType*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    VirtualTrackType_FrameRateListType&
    operator= (const VirtualTrackType_FrameRateListType& x);

    virtual 
    ~VirtualTrackType_FrameRateListType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    FrameRateSequence FrameRate_;
  };

  class VirtualTrackType_SampleRateListType: public ::xml_schema::Type
  {
    public:
    // SampleRate
    //
    typedef ::dcml::RationalType SampleRateType;
    typedef ::xsd::cxx::tree::sequence< SampleRateType > SampleRateSequence;
    typedef SampleRateSequence::iterator SampleRateIterator;
    typedef SampleRateSequence::const_iterator SampleRateConstIterator;
    typedef ::xsd::cxx::tree::traits< SampleRateType, char > SampleRateTraits;

    const SampleRateSequence&
    getSampleRate () const;

    SampleRateSequence&
    getSampleRate ();

    void
    setSampleRate (const SampleRateSequence& s);

    // Constructors.
    //
    VirtualTrackType_SampleRateListType ();

    VirtualTrackType_SampleRateListType (const ::xercesc::DOMElement& e,
                                         ::xml_schema::Flags f = 0,
                                         ::xml_schema::Container* c = 0);

    VirtualTrackType_SampleRateListType (const VirtualTrackType_SampleRateListType& x,
                                         ::xml_schema::Flags f = 0,
                                         ::xml_schema::Container* c = 0);

    virtual VirtualTrackType_SampleRateListType*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    VirtualTrackType_SampleRateListType&
    operator= (const VirtualTrackType_SampleRateListType& x);

    virtual 
    ~VirtualTrackType_SampleRateListType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    SampleRateSequence SampleRate_;
  };

  class VirtualTrackType_TimelineComplexityType: public ::xml_schema::Type
  {
    public:
    // SequenceCardinality
    //
    typedef ::dsl::CardinalityType SequenceCardinalityType;
    typedef ::xsd::cxx::tree::optional< SequenceCardinalityType > SequenceCardinalityOptional;
    typedef ::xsd::cxx::tree::traits< SequenceCardinalityType, char > SequenceCardinalityTraits;

    const SequenceCardinalityOptional&
    getSequenceCardinality () const;

    SequenceCardinalityOptional&
    getSequenceCardinality ();

    void
    setSequenceCardinality (const SequenceCardinalityType& x);

    void
    setSequenceCardinality (const SequenceCardinalityOptional& x);

    void
    setSequenceCardinality (::std::auto_ptr< SequenceCardinalityType > p);

    // ResourceCardinality
    //
    typedef ::dsl::CardinalityType ResourceCardinalityType;
    typedef ::xsd::cxx::tree::optional< ResourceCardinalityType > ResourceCardinalityOptional;
    typedef ::xsd::cxx::tree::traits< ResourceCardinalityType, char > ResourceCardinalityTraits;

    const ResourceCardinalityOptional&
    getResourceCardinality () const;

    ResourceCardinalityOptional&
    getResourceCardinality ();

    void
    setResourceCardinality (const ResourceCardinalityType& x);

    void
    setResourceCardinality (const ResourceCardinalityOptional& x);

    void
    setResourceCardinality (::std::auto_ptr< ResourceCardinalityType > p);

    // Sequence
    //
    typedef ::dsl::VirtualTrackType_TimelineComplexityType_SequenceType SequenceType;
    typedef ::xsd::cxx::tree::traits< SequenceType, char > SequenceTraits;

    const SequenceType&
    getSequence () const;

    SequenceType&
    getSequence ();

    void
    setSequence (const SequenceType& x);

    void
    setSequence (::std::auto_ptr< SequenceType > p);

    // type
    //
    typedef ::dsl::VirtualTrackType_TimelineComplexityType_typeType TypeType;
    typedef ::xsd::cxx::tree::traits< TypeType, char > TypeTraits;

    const TypeType&
    getType () const;

    TypeType&
    getType ();

    void
    setType (const TypeType& x);

    void
    setType (::std::auto_ptr< TypeType > p);

    // Constructors.
    //
    VirtualTrackType_TimelineComplexityType (const SequenceType&,
                                             const TypeType&);

    VirtualTrackType_TimelineComplexityType (::std::auto_ptr< SequenceType >,
                                             const TypeType&);

    VirtualTrackType_TimelineComplexityType (const ::xercesc::DOMElement& e,
                                             ::xml_schema::Flags f = 0,
                                             ::xml_schema::Container* c = 0);

    VirtualTrackType_TimelineComplexityType (const VirtualTrackType_TimelineComplexityType& x,
                                             ::xml_schema::Flags f = 0,
                                             ::xml_schema::Container* c = 0);

    virtual VirtualTrackType_TimelineComplexityType*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    VirtualTrackType_TimelineComplexityType&
    operator= (const VirtualTrackType_TimelineComplexityType& x);

    virtual 
    ~VirtualTrackType_TimelineComplexityType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    SequenceCardinalityOptional SequenceCardinality_;
    ResourceCardinalityOptional ResourceCardinality_;
    ::xsd::cxx::tree::one< SequenceType > Sequence_;
    ::xsd::cxx::tree::one< TypeType > type_;
  };

  class VirtualTrackType_ReferenceCardinalityType: public ::xml_schema::Type
  {
    public:
    // Sequence
    //
    typedef ::dsl::CardinalityType SequenceType;
    typedef ::xsd::cxx::tree::traits< SequenceType, char > SequenceTraits;

    const SequenceType&
    getSequence () const;

    SequenceType&
    getSequence ();

    void
    setSequence (const SequenceType& x);

    void
    setSequence (::std::auto_ptr< SequenceType > p);

    // Constructors.
    //
    VirtualTrackType_ReferenceCardinalityType (const SequenceType&);

    VirtualTrackType_ReferenceCardinalityType (::std::auto_ptr< SequenceType >);

    VirtualTrackType_ReferenceCardinalityType (const ::xercesc::DOMElement& e,
                                               ::xml_schema::Flags f = 0,
                                               ::xml_schema::Container* c = 0);

    VirtualTrackType_ReferenceCardinalityType (const VirtualTrackType_ReferenceCardinalityType& x,
                                               ::xml_schema::Flags f = 0,
                                               ::xml_schema::Container* c = 0);

    virtual VirtualTrackType_ReferenceCardinalityType*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    VirtualTrackType_ReferenceCardinalityType&
    operator= (const VirtualTrackType_ReferenceCardinalityType& x);

    virtual 
    ~VirtualTrackType_ReferenceCardinalityType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ::xsd::cxx::tree::one< SequenceType > Sequence_;
  };

  class VirtualTrackType_namespaceType: public ::xml_schema::String
  {
    public:
    // Constructors.
    //
    VirtualTrackType_namespaceType ();

    VirtualTrackType_namespaceType (const char*);

    VirtualTrackType_namespaceType (const ::std::string&);

    VirtualTrackType_namespaceType (const ::xml_schema::String&);

    VirtualTrackType_namespaceType (const ::xercesc::DOMElement& e,
                                    ::xml_schema::Flags f = 0,
                                    ::xml_schema::Container* c = 0);

    VirtualTrackType_namespaceType (const ::xercesc::DOMAttr& a,
                                    ::xml_schema::Flags f = 0,
                                    ::xml_schema::Container* c = 0);

    VirtualTrackType_namespaceType (const ::std::string& s,
                                    const ::xercesc::DOMElement* e,
                                    ::xml_schema::Flags f = 0,
                                    ::xml_schema::Container* c = 0);

    VirtualTrackType_namespaceType (const VirtualTrackType_namespaceType& x,
                                    ::xml_schema::Flags f = 0,
                                    ::xml_schema::Container* c = 0);

    virtual VirtualTrackType_namespaceType*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    virtual 
    ~VirtualTrackType_namespaceType ();
  };

  class CardinalityType_MinItemType: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::Integer, char, ::xml_schema::SimpleType >
  {
    public:
    // Constructors.
    //
    CardinalityType_MinItemType (const ::xml_schema::Integer&);

    CardinalityType_MinItemType (const ::xercesc::DOMElement& e,
                                 ::xml_schema::Flags f = 0,
                                 ::xml_schema::Container* c = 0);

    CardinalityType_MinItemType (const ::xercesc::DOMAttr& a,
                                 ::xml_schema::Flags f = 0,
                                 ::xml_schema::Container* c = 0);

    CardinalityType_MinItemType (const ::std::string& s,
                                 const ::xercesc::DOMElement* e,
                                 ::xml_schema::Flags f = 0,
                                 ::xml_schema::Container* c = 0);

    CardinalityType_MinItemType (const CardinalityType_MinItemType& x,
                                 ::xml_schema::Flags f = 0,
                                 ::xml_schema::Container* c = 0);

    virtual CardinalityType_MinItemType*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    virtual 
    ~CardinalityType_MinItemType ();
  };

  class CardinalityType_MaxItemType: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::Integer, char, ::xml_schema::SimpleType >
  {
    public:
    // Constructors.
    //
    CardinalityType_MaxItemType (const ::xml_schema::Integer&);

    CardinalityType_MaxItemType (const ::xercesc::DOMElement& e,
                                 ::xml_schema::Flags f = 0,
                                 ::xml_schema::Container* c = 0);

    CardinalityType_MaxItemType (const ::xercesc::DOMAttr& a,
                                 ::xml_schema::Flags f = 0,
                                 ::xml_schema::Container* c = 0);

    CardinalityType_MaxItemType (const ::std::string& s,
                                 const ::xercesc::DOMElement* e,
                                 ::xml_schema::Flags f = 0,
                                 ::xml_schema::Container* c = 0);

    CardinalityType_MaxItemType (const CardinalityType_MaxItemType& x,
                                 ::xml_schema::Flags f = 0,
                                 ::xml_schema::Container* c = 0);

    virtual CardinalityType_MaxItemType*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    virtual 
    ~CardinalityType_MaxItemType ();
  };

  class DeliverySpecificationList_DeliverableListType: public ::xml_schema::Type
  {
    public:
    // Deliverable
    //
    typedef ::dsl::DeliverableType DeliverableType;
    typedef ::xsd::cxx::tree::sequence< DeliverableType > DeliverableSequence;
    typedef DeliverableSequence::iterator DeliverableIterator;
    typedef DeliverableSequence::const_iterator DeliverableConstIterator;
    typedef ::xsd::cxx::tree::traits< DeliverableType, char > DeliverableTraits;

    const DeliverableSequence&
    getDeliverable () const;

    DeliverableSequence&
    getDeliverable ();

    void
    setDeliverable (const DeliverableSequence& s);

    // Constructors.
    //
    DeliverySpecificationList_DeliverableListType ();

    DeliverySpecificationList_DeliverableListType (const ::xercesc::DOMElement& e,
                                                   ::xml_schema::Flags f = 0,
                                                   ::xml_schema::Container* c = 0);

    DeliverySpecificationList_DeliverableListType (const DeliverySpecificationList_DeliverableListType& x,
                                                   ::xml_schema::Flags f = 0,
                                                   ::xml_schema::Container* c = 0);

    virtual DeliverySpecificationList_DeliverableListType*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    DeliverySpecificationList_DeliverableListType&
    operator= (const DeliverySpecificationList_DeliverableListType& x);

    virtual 
    ~DeliverySpecificationList_DeliverableListType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    DeliverableSequence Deliverable_;
  };

  class DeliverableType_CompositionPlaylistConstraintsType_ApplicationIdentificationListType: public ::xml_schema::Type
  {
    public:
    // MatchType
    //
    typedef ::dsl::DeliverableType_CompositionPlaylistConstraintsType_ApplicationIdentificationListType_MatchTypeType MatchTypeType;
    typedef ::xsd::cxx::tree::traits< MatchTypeType, char > MatchTypeTraits;

    const MatchTypeType&
    getMatchType () const;

    MatchTypeType&
    getMatchType ();

    void
    setMatchType (const MatchTypeType& x);

    void
    setMatchType (::std::auto_ptr< MatchTypeType > p);

    // ValueList
    //
    typedef ::dsl::DeliverableType_CompositionPlaylistConstraintsType_ApplicationIdentificationListType_ValueListType ValueListType;
    typedef ::xsd::cxx::tree::traits< ValueListType, char > ValueListTraits;

    const ValueListType&
    getValueList () const;

    ValueListType&
    getValueList ();

    void
    setValueList (const ValueListType& x);

    void
    setValueList (::std::auto_ptr< ValueListType > p);

    // Constructors.
    //
    DeliverableType_CompositionPlaylistConstraintsType_ApplicationIdentificationListType (const MatchTypeType&,
                                                                                          const ValueListType&);

    DeliverableType_CompositionPlaylistConstraintsType_ApplicationIdentificationListType (const MatchTypeType&,
                                                                                          ::std::auto_ptr< ValueListType >);

    DeliverableType_CompositionPlaylistConstraintsType_ApplicationIdentificationListType (const ::xercesc::DOMElement& e,
                                                                                          ::xml_schema::Flags f = 0,
                                                                                          ::xml_schema::Container* c = 0);

    DeliverableType_CompositionPlaylistConstraintsType_ApplicationIdentificationListType (const DeliverableType_CompositionPlaylistConstraintsType_ApplicationIdentificationListType& x,
                                                                                          ::xml_schema::Flags f = 0,
                                                                                          ::xml_schema::Container* c = 0);

    virtual DeliverableType_CompositionPlaylistConstraintsType_ApplicationIdentificationListType*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    DeliverableType_CompositionPlaylistConstraintsType_ApplicationIdentificationListType&
    operator= (const DeliverableType_CompositionPlaylistConstraintsType_ApplicationIdentificationListType& x);

    virtual 
    ~DeliverableType_CompositionPlaylistConstraintsType_ApplicationIdentificationListType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ::xsd::cxx::tree::one< MatchTypeType > MatchType_;
    ::xsd::cxx::tree::one< ValueListType > ValueList_;
  };

  class DeliverableType_CompositionPlaylistConstraintsType_VirtualTrackListType: public ::xml_schema::Type
  {
    public:
    // VirtualTrack
    //
    typedef ::dsl::VirtualTrackType VirtualTrackType;
    typedef ::xsd::cxx::tree::sequence< VirtualTrackType > VirtualTrackSequence;
    typedef VirtualTrackSequence::iterator VirtualTrackIterator;
    typedef VirtualTrackSequence::const_iterator VirtualTrackConstIterator;
    typedef ::xsd::cxx::tree::traits< VirtualTrackType, char > VirtualTrackTraits;

    const VirtualTrackSequence&
    getVirtualTrack () const;

    VirtualTrackSequence&
    getVirtualTrack ();

    void
    setVirtualTrack (const VirtualTrackSequence& s);

    // Constructors.
    //
    DeliverableType_CompositionPlaylistConstraintsType_VirtualTrackListType ();

    DeliverableType_CompositionPlaylistConstraintsType_VirtualTrackListType (const ::xercesc::DOMElement& e,
                                                                             ::xml_schema::Flags f = 0,
                                                                             ::xml_schema::Container* c = 0);

    DeliverableType_CompositionPlaylistConstraintsType_VirtualTrackListType (const DeliverableType_CompositionPlaylistConstraintsType_VirtualTrackListType& x,
                                                                             ::xml_schema::Flags f = 0,
                                                                             ::xml_schema::Container* c = 0);

    virtual DeliverableType_CompositionPlaylistConstraintsType_VirtualTrackListType*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    DeliverableType_CompositionPlaylistConstraintsType_VirtualTrackListType&
    operator= (const DeliverableType_CompositionPlaylistConstraintsType_VirtualTrackListType& x);

    virtual 
    ~DeliverableType_CompositionPlaylistConstraintsType_VirtualTrackListType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    VirtualTrackSequence VirtualTrack_;
  };

  class VirtualTrackType_SoundfieldGroupConfigurationType_MCATagSymbolType: public ::xml_schema::String
  {
    public:
    // Constructors.
    //
    VirtualTrackType_SoundfieldGroupConfigurationType_MCATagSymbolType ();

    VirtualTrackType_SoundfieldGroupConfigurationType_MCATagSymbolType (const char*);

    VirtualTrackType_SoundfieldGroupConfigurationType_MCATagSymbolType (const ::std::string&);

    VirtualTrackType_SoundfieldGroupConfigurationType_MCATagSymbolType (const ::xml_schema::String&);

    VirtualTrackType_SoundfieldGroupConfigurationType_MCATagSymbolType (const ::xercesc::DOMElement& e,
                                                                        ::xml_schema::Flags f = 0,
                                                                        ::xml_schema::Container* c = 0);

    VirtualTrackType_SoundfieldGroupConfigurationType_MCATagSymbolType (const ::xercesc::DOMAttr& a,
                                                                        ::xml_schema::Flags f = 0,
                                                                        ::xml_schema::Container* c = 0);

    VirtualTrackType_SoundfieldGroupConfigurationType_MCATagSymbolType (const ::std::string& s,
                                                                        const ::xercesc::DOMElement* e,
                                                                        ::xml_schema::Flags f = 0,
                                                                        ::xml_schema::Container* c = 0);

    VirtualTrackType_SoundfieldGroupConfigurationType_MCATagSymbolType (const VirtualTrackType_SoundfieldGroupConfigurationType_MCATagSymbolType& x,
                                                                        ::xml_schema::Flags f = 0,
                                                                        ::xml_schema::Container* c = 0);

    virtual VirtualTrackType_SoundfieldGroupConfigurationType_MCATagSymbolType*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    virtual 
    ~VirtualTrackType_SoundfieldGroupConfigurationType_MCATagSymbolType ();
  };

  class VirtualTrackType_AudioChannelMappingType_AudioChannelType: public ::xml_schema::Type
  {
    public:
    // MCATagSymbol
    //
    typedef ::dsl::VirtualTrackType_AudioChannelMappingType_AudioChannelType_MCATagSymbolType MCATagSymbolType;
    typedef ::xsd::cxx::tree::traits< MCATagSymbolType, char > MCATagSymbolTraits;

    const MCATagSymbolType&
    getMCATagSymbol () const;

    MCATagSymbolType&
    getMCATagSymbol ();

    void
    setMCATagSymbol (const MCATagSymbolType& x);

    void
    setMCATagSymbol (::std::auto_ptr< MCATagSymbolType > p);

    // Constructors.
    //
    VirtualTrackType_AudioChannelMappingType_AudioChannelType (const MCATagSymbolType&);

    VirtualTrackType_AudioChannelMappingType_AudioChannelType (const ::xercesc::DOMElement& e,
                                                               ::xml_schema::Flags f = 0,
                                                               ::xml_schema::Container* c = 0);

    VirtualTrackType_AudioChannelMappingType_AudioChannelType (const VirtualTrackType_AudioChannelMappingType_AudioChannelType& x,
                                                               ::xml_schema::Flags f = 0,
                                                               ::xml_schema::Container* c = 0);

    virtual VirtualTrackType_AudioChannelMappingType_AudioChannelType*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    VirtualTrackType_AudioChannelMappingType_AudioChannelType&
    operator= (const VirtualTrackType_AudioChannelMappingType_AudioChannelType& x);

    virtual 
    ~VirtualTrackType_AudioChannelMappingType_AudioChannelType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ::xsd::cxx::tree::one< MCATagSymbolType > MCATagSymbol_;
  };

  class VirtualTrackType_EssenceEncodingConstraintListType_EssenceEncodingConstraintType: public ::xml_schema::Type
  {
    public:
    // Name
    //
    typedef ::xml_schema::String NameType;
    typedef ::xsd::cxx::tree::traits< NameType, char > NameTraits;

    const NameType&
    getName () const;

    NameType&
    getName ();

    void
    setName (const NameType& x);

    void
    setName (::std::auto_ptr< NameType > p);

    // PropertyList
    //
    typedef ::dsl::VirtualTrackType_EssenceEncodingConstraintListType_EssenceEncodingConstraintType_PropertyListType PropertyListType;
    typedef ::xsd::cxx::tree::traits< PropertyListType, char > PropertyListTraits;

    const PropertyListType&
    getPropertyList () const;

    PropertyListType&
    getPropertyList ();

    void
    setPropertyList (const PropertyListType& x);

    void
    setPropertyList (::std::auto_ptr< PropertyListType > p);

    // Constructors.
    //
    VirtualTrackType_EssenceEncodingConstraintListType_EssenceEncodingConstraintType (const NameType&,
                                                                                      const PropertyListType&);

    VirtualTrackType_EssenceEncodingConstraintListType_EssenceEncodingConstraintType (const NameType&,
                                                                                      ::std::auto_ptr< PropertyListType >);

    VirtualTrackType_EssenceEncodingConstraintListType_EssenceEncodingConstraintType (const ::xercesc::DOMElement& e,
                                                                                      ::xml_schema::Flags f = 0,
                                                                                      ::xml_schema::Container* c = 0);

    VirtualTrackType_EssenceEncodingConstraintListType_EssenceEncodingConstraintType (const VirtualTrackType_EssenceEncodingConstraintListType_EssenceEncodingConstraintType& x,
                                                                                      ::xml_schema::Flags f = 0,
                                                                                      ::xml_schema::Container* c = 0);

    virtual VirtualTrackType_EssenceEncodingConstraintListType_EssenceEncodingConstraintType*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    VirtualTrackType_EssenceEncodingConstraintListType_EssenceEncodingConstraintType&
    operator= (const VirtualTrackType_EssenceEncodingConstraintListType_EssenceEncodingConstraintType& x);

    virtual 
    ~VirtualTrackType_EssenceEncodingConstraintListType_EssenceEncodingConstraintType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ::xsd::cxx::tree::one< NameType > Name_;
    ::xsd::cxx::tree::one< PropertyListType > PropertyList_;
  };

  class VirtualTrackType_TimelineComplexityType_SequenceType: public ::xml_schema::Type
  {
    public:
    // Cardinality
    //
    typedef ::dsl::CardinalityType CardinalityType;
    typedef ::xsd::cxx::tree::optional< CardinalityType > CardinalityOptional;
    typedef ::xsd::cxx::tree::traits< CardinalityType, char > CardinalityTraits;

    const CardinalityOptional&
    getCardinality () const;

    CardinalityOptional&
    getCardinality ();

    void
    setCardinality (const CardinalityType& x);

    void
    setCardinality (const CardinalityOptional& x);

    void
    setCardinality (::std::auto_ptr< CardinalityType > p);

    // Resource
    //
    typedef ::dsl::VirtualTrackType_TimelineComplexityType_SequenceType_ResourceType ResourceType;
    typedef ::xsd::cxx::tree::traits< ResourceType, char > ResourceTraits;

    const ResourceType&
    getResource () const;

    ResourceType&
    getResource ();

    void
    setResource (const ResourceType& x);

    void
    setResource (::std::auto_ptr< ResourceType > p);

    // Constructors.
    //
    VirtualTrackType_TimelineComplexityType_SequenceType (const ResourceType&);

    VirtualTrackType_TimelineComplexityType_SequenceType (::std::auto_ptr< ResourceType >);

    VirtualTrackType_TimelineComplexityType_SequenceType (const ::xercesc::DOMElement& e,
                                                          ::xml_schema::Flags f = 0,
                                                          ::xml_schema::Container* c = 0);

    VirtualTrackType_TimelineComplexityType_SequenceType (const VirtualTrackType_TimelineComplexityType_SequenceType& x,
                                                          ::xml_schema::Flags f = 0,
                                                          ::xml_schema::Container* c = 0);

    virtual VirtualTrackType_TimelineComplexityType_SequenceType*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    VirtualTrackType_TimelineComplexityType_SequenceType&
    operator= (const VirtualTrackType_TimelineComplexityType_SequenceType& x);

    virtual 
    ~VirtualTrackType_TimelineComplexityType_SequenceType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    CardinalityOptional Cardinality_;
    ::xsd::cxx::tree::one< ResourceType > Resource_;
  };

  class VirtualTrackType_TimelineComplexityType_typeType: public ::xml_schema::String
  {
    public:
    // Constructors.
    //
    VirtualTrackType_TimelineComplexityType_typeType ();

    VirtualTrackType_TimelineComplexityType_typeType (const char*);

    VirtualTrackType_TimelineComplexityType_typeType (const ::std::string&);

    VirtualTrackType_TimelineComplexityType_typeType (const ::xml_schema::String&);

    VirtualTrackType_TimelineComplexityType_typeType (const ::xercesc::DOMElement& e,
                                                      ::xml_schema::Flags f = 0,
                                                      ::xml_schema::Container* c = 0);

    VirtualTrackType_TimelineComplexityType_typeType (const ::xercesc::DOMAttr& a,
                                                      ::xml_schema::Flags f = 0,
                                                      ::xml_schema::Container* c = 0);

    VirtualTrackType_TimelineComplexityType_typeType (const ::std::string& s,
                                                      const ::xercesc::DOMElement* e,
                                                      ::xml_schema::Flags f = 0,
                                                      ::xml_schema::Container* c = 0);

    VirtualTrackType_TimelineComplexityType_typeType (const VirtualTrackType_TimelineComplexityType_typeType& x,
                                                      ::xml_schema::Flags f = 0,
                                                      ::xml_schema::Container* c = 0);

    virtual VirtualTrackType_TimelineComplexityType_typeType*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    virtual 
    ~VirtualTrackType_TimelineComplexityType_typeType ();
  };

  class DeliverableType_CompositionPlaylistConstraintsType_ApplicationIdentificationListType_MatchTypeType: public ::xml_schema::String
  {
    public:
    // Constructors.
    //
    DeliverableType_CompositionPlaylistConstraintsType_ApplicationIdentificationListType_MatchTypeType ();

    DeliverableType_CompositionPlaylistConstraintsType_ApplicationIdentificationListType_MatchTypeType (const char*);

    DeliverableType_CompositionPlaylistConstraintsType_ApplicationIdentificationListType_MatchTypeType (const ::std::string&);

    DeliverableType_CompositionPlaylistConstraintsType_ApplicationIdentificationListType_MatchTypeType (const ::xml_schema::String&);

    DeliverableType_CompositionPlaylistConstraintsType_ApplicationIdentificationListType_MatchTypeType (const ::xercesc::DOMElement& e,
                                                                                                        ::xml_schema::Flags f = 0,
                                                                                                        ::xml_schema::Container* c = 0);

    DeliverableType_CompositionPlaylistConstraintsType_ApplicationIdentificationListType_MatchTypeType (const ::xercesc::DOMAttr& a,
                                                                                                        ::xml_schema::Flags f = 0,
                                                                                                        ::xml_schema::Container* c = 0);

    DeliverableType_CompositionPlaylistConstraintsType_ApplicationIdentificationListType_MatchTypeType (const ::std::string& s,
                                                                                                        const ::xercesc::DOMElement* e,
                                                                                                        ::xml_schema::Flags f = 0,
                                                                                                        ::xml_schema::Container* c = 0);

    DeliverableType_CompositionPlaylistConstraintsType_ApplicationIdentificationListType_MatchTypeType (const DeliverableType_CompositionPlaylistConstraintsType_ApplicationIdentificationListType_MatchTypeType& x,
                                                                                                        ::xml_schema::Flags f = 0,
                                                                                                        ::xml_schema::Container* c = 0);

    virtual DeliverableType_CompositionPlaylistConstraintsType_ApplicationIdentificationListType_MatchTypeType*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    virtual 
    ~DeliverableType_CompositionPlaylistConstraintsType_ApplicationIdentificationListType_MatchTypeType ();
  };

  class DeliverableType_CompositionPlaylistConstraintsType_ApplicationIdentificationListType_ValueListType: public ::xml_schema::Type
  {
    public:
    // ApplicationIdentification
    //
    typedef ::xml_schema::Uri ApplicationIdentificationType;
    typedef ::xsd::cxx::tree::sequence< ApplicationIdentificationType > ApplicationIdentificationSequence;
    typedef ApplicationIdentificationSequence::iterator ApplicationIdentificationIterator;
    typedef ApplicationIdentificationSequence::const_iterator ApplicationIdentificationConstIterator;
    typedef ::xsd::cxx::tree::traits< ApplicationIdentificationType, char > ApplicationIdentificationTraits;

    const ApplicationIdentificationSequence&
    getApplicationIdentification () const;

    ApplicationIdentificationSequence&
    getApplicationIdentification ();

    void
    setApplicationIdentification (const ApplicationIdentificationSequence& s);

    // Constructors.
    //
    DeliverableType_CompositionPlaylistConstraintsType_ApplicationIdentificationListType_ValueListType ();

    DeliverableType_CompositionPlaylistConstraintsType_ApplicationIdentificationListType_ValueListType (const ::xercesc::DOMElement& e,
                                                                                                        ::xml_schema::Flags f = 0,
                                                                                                        ::xml_schema::Container* c = 0);

    DeliverableType_CompositionPlaylistConstraintsType_ApplicationIdentificationListType_ValueListType (const DeliverableType_CompositionPlaylistConstraintsType_ApplicationIdentificationListType_ValueListType& x,
                                                                                                        ::xml_schema::Flags f = 0,
                                                                                                        ::xml_schema::Container* c = 0);

    virtual DeliverableType_CompositionPlaylistConstraintsType_ApplicationIdentificationListType_ValueListType*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    DeliverableType_CompositionPlaylistConstraintsType_ApplicationIdentificationListType_ValueListType&
    operator= (const DeliverableType_CompositionPlaylistConstraintsType_ApplicationIdentificationListType_ValueListType& x);

    virtual 
    ~DeliverableType_CompositionPlaylistConstraintsType_ApplicationIdentificationListType_ValueListType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ApplicationIdentificationSequence ApplicationIdentification_;
  };

  class VirtualTrackType_AudioChannelMappingType_AudioChannelType_MCATagSymbolType: public ::xml_schema::String
  {
    public:
    // Constructors.
    //
    VirtualTrackType_AudioChannelMappingType_AudioChannelType_MCATagSymbolType ();

    VirtualTrackType_AudioChannelMappingType_AudioChannelType_MCATagSymbolType (const char*);

    VirtualTrackType_AudioChannelMappingType_AudioChannelType_MCATagSymbolType (const ::std::string&);

    VirtualTrackType_AudioChannelMappingType_AudioChannelType_MCATagSymbolType (const ::xml_schema::String&);

    VirtualTrackType_AudioChannelMappingType_AudioChannelType_MCATagSymbolType (const ::xercesc::DOMElement& e,
                                                                                ::xml_schema::Flags f = 0,
                                                                                ::xml_schema::Container* c = 0);

    VirtualTrackType_AudioChannelMappingType_AudioChannelType_MCATagSymbolType (const ::xercesc::DOMAttr& a,
                                                                                ::xml_schema::Flags f = 0,
                                                                                ::xml_schema::Container* c = 0);

    VirtualTrackType_AudioChannelMappingType_AudioChannelType_MCATagSymbolType (const ::std::string& s,
                                                                                const ::xercesc::DOMElement* e,
                                                                                ::xml_schema::Flags f = 0,
                                                                                ::xml_schema::Container* c = 0);

    VirtualTrackType_AudioChannelMappingType_AudioChannelType_MCATagSymbolType (const VirtualTrackType_AudioChannelMappingType_AudioChannelType_MCATagSymbolType& x,
                                                                                ::xml_schema::Flags f = 0,
                                                                                ::xml_schema::Container* c = 0);

    virtual VirtualTrackType_AudioChannelMappingType_AudioChannelType_MCATagSymbolType*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    virtual 
    ~VirtualTrackType_AudioChannelMappingType_AudioChannelType_MCATagSymbolType ();
  };

  class VirtualTrackType_EssenceEncodingConstraintListType_EssenceEncodingConstraintType_PropertyListType: public ::xml_schema::Type
  {
    public:
    // Property
    //
    typedef ::dsl::VirtualTrackType_EssenceEncodingConstraintListType_EssenceEncodingConstraintType_PropertyListType_PropertyType PropertyType;
    typedef ::xsd::cxx::tree::sequence< PropertyType > PropertySequence;
    typedef PropertySequence::iterator PropertyIterator;
    typedef PropertySequence::const_iterator PropertyConstIterator;
    typedef ::xsd::cxx::tree::traits< PropertyType, char > PropertyTraits;

    const PropertySequence&
    getProperty () const;

    PropertySequence&
    getProperty ();

    void
    setProperty (const PropertySequence& s);

    // Constructors.
    //
    VirtualTrackType_EssenceEncodingConstraintListType_EssenceEncodingConstraintType_PropertyListType ();

    VirtualTrackType_EssenceEncodingConstraintListType_EssenceEncodingConstraintType_PropertyListType (const ::xercesc::DOMElement& e,
                                                                                                       ::xml_schema::Flags f = 0,
                                                                                                       ::xml_schema::Container* c = 0);

    VirtualTrackType_EssenceEncodingConstraintListType_EssenceEncodingConstraintType_PropertyListType (const VirtualTrackType_EssenceEncodingConstraintListType_EssenceEncodingConstraintType_PropertyListType& x,
                                                                                                       ::xml_schema::Flags f = 0,
                                                                                                       ::xml_schema::Container* c = 0);

    virtual VirtualTrackType_EssenceEncodingConstraintListType_EssenceEncodingConstraintType_PropertyListType*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    VirtualTrackType_EssenceEncodingConstraintListType_EssenceEncodingConstraintType_PropertyListType&
    operator= (const VirtualTrackType_EssenceEncodingConstraintListType_EssenceEncodingConstraintType_PropertyListType& x);

    virtual 
    ~VirtualTrackType_EssenceEncodingConstraintListType_EssenceEncodingConstraintType_PropertyListType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    PropertySequence Property_;
  };

  class VirtualTrackType_TimelineComplexityType_SequenceType_ResourceType: public ::xml_schema::Type
  {
    public:
    // Cardinality
    //
    typedef ::dsl::CardinalityType CardinalityType;
    typedef ::xsd::cxx::tree::optional< CardinalityType > CardinalityOptional;
    typedef ::xsd::cxx::tree::traits< CardinalityType, char > CardinalityTraits;

    const CardinalityOptional&
    getCardinality () const;

    CardinalityOptional&
    getCardinality ();

    void
    setCardinality (const CardinalityType& x);

    void
    setCardinality (const CardinalityOptional& x);

    void
    setCardinality (::std::auto_ptr< CardinalityType > p);

    // Constructors.
    //
    VirtualTrackType_TimelineComplexityType_SequenceType_ResourceType ();

    VirtualTrackType_TimelineComplexityType_SequenceType_ResourceType (const ::xercesc::DOMElement& e,
                                                                       ::xml_schema::Flags f = 0,
                                                                       ::xml_schema::Container* c = 0);

    VirtualTrackType_TimelineComplexityType_SequenceType_ResourceType (const VirtualTrackType_TimelineComplexityType_SequenceType_ResourceType& x,
                                                                       ::xml_schema::Flags f = 0,
                                                                       ::xml_schema::Container* c = 0);

    virtual VirtualTrackType_TimelineComplexityType_SequenceType_ResourceType*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    VirtualTrackType_TimelineComplexityType_SequenceType_ResourceType&
    operator= (const VirtualTrackType_TimelineComplexityType_SequenceType_ResourceType& x);

    virtual 
    ~VirtualTrackType_TimelineComplexityType_SequenceType_ResourceType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    CardinalityOptional Cardinality_;
  };

  class VirtualTrackType_EssenceEncodingConstraintListType_EssenceEncodingConstraintType_PropertyListType_PropertyType: public ::xml_schema::Type
  {
    public:
    // Name
    //
    typedef ::xml_schema::String NameType;
    typedef ::xsd::cxx::tree::traits< NameType, char > NameTraits;

    const NameType&
    getName () const;

    NameType&
    getName ();

    void
    setName (const NameType& x);

    void
    setName (::std::auto_ptr< NameType > p);

    // value
    //
    typedef ::xml_schema::String ValueType;
    typedef ::xsd::cxx::tree::traits< ValueType, char > ValueTraits;

    const ValueType&
    getValue () const;

    ValueType&
    getValue ();

    void
    setValue (const ValueType& x);

    void
    setValue (::std::auto_ptr< ValueType > p);

    // Constructors.
    //
    VirtualTrackType_EssenceEncodingConstraintListType_EssenceEncodingConstraintType_PropertyListType_PropertyType (const NameType&,
                                                                                                                    const ValueType&);

    VirtualTrackType_EssenceEncodingConstraintListType_EssenceEncodingConstraintType_PropertyListType_PropertyType (const ::xercesc::DOMElement& e,
                                                                                                                    ::xml_schema::Flags f = 0,
                                                                                                                    ::xml_schema::Container* c = 0);

    VirtualTrackType_EssenceEncodingConstraintListType_EssenceEncodingConstraintType_PropertyListType_PropertyType (const VirtualTrackType_EssenceEncodingConstraintListType_EssenceEncodingConstraintType_PropertyListType_PropertyType& x,
                                                                                                                    ::xml_schema::Flags f = 0,
                                                                                                                    ::xml_schema::Container* c = 0);

    virtual VirtualTrackType_EssenceEncodingConstraintListType_EssenceEncodingConstraintType_PropertyListType_PropertyType*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    VirtualTrackType_EssenceEncodingConstraintListType_EssenceEncodingConstraintType_PropertyListType_PropertyType&
    operator= (const VirtualTrackType_EssenceEncodingConstraintListType_EssenceEncodingConstraintType_PropertyListType_PropertyType& x);

    virtual 
    ~VirtualTrackType_EssenceEncodingConstraintListType_EssenceEncodingConstraintType_PropertyListType_PropertyType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ::xsd::cxx::tree::one< NameType > Name_;
    ::xsd::cxx::tree::one< ValueType > value_;
  };
}

#include <iosfwd>

namespace dsl
{
  ::std::ostream&
  operator<< (::std::ostream&, const DeliverableType&);

  ::std::ostream&
  operator<< (::std::ostream&, const VirtualTrackType&);

  ::std::ostream&
  operator<< (::std::ostream&, const CardinalityType&);

  ::std::ostream&
  operator<< (::std::ostream&, const DeliverySpecificationList&);

  ::std::ostream&
  operator<< (::std::ostream&, const DeliverableType_LabelType&);

  ::std::ostream&
  operator<< (::std::ostream&, const DeliverableType_CompositionPlaylistConstraintsType&);

  ::std::ostream&
  operator<< (::std::ostream&, const VirtualTrackType_SoundfieldGroupConfigurationType&);

  ::std::ostream&
  operator<< (::std::ostream&, const VirtualTrackType_AudioChannelMappingType&);

  ::std::ostream&
  operator<< (::std::ostream&, const VirtualTrackType_EssenceEncodingConstraintListType&);

  ::std::ostream&
  operator<< (::std::ostream&, const VirtualTrackType_ColorComponentsType&);

  ::std::ostream&
  operator<< (::std::ostream&, const VirtualTrackType_PixelBitDepthListType&);

  ::std::ostream&
  operator<< (::std::ostream&, const VirtualTrackType_ImageFrameWidthListType&);

  ::std::ostream&
  operator<< (::std::ostream&, const VirtualTrackType_ImageFrameHeightListType&);

  ::std::ostream&
  operator<< (::std::ostream&, const VirtualTrackType_FrameRateListType&);

  ::std::ostream&
  operator<< (::std::ostream&, const VirtualTrackType_SampleRateListType&);

  ::std::ostream&
  operator<< (::std::ostream&, const VirtualTrackType_TimelineComplexityType&);

  ::std::ostream&
  operator<< (::std::ostream&, const VirtualTrackType_ReferenceCardinalityType&);

  ::std::ostream&
  operator<< (::std::ostream&, const VirtualTrackType_namespaceType&);

  ::std::ostream&
  operator<< (::std::ostream&, const CardinalityType_MinItemType&);

  ::std::ostream&
  operator<< (::std::ostream&, const CardinalityType_MaxItemType&);

  ::std::ostream&
  operator<< (::std::ostream&, const DeliverySpecificationList_DeliverableListType&);

  ::std::ostream&
  operator<< (::std::ostream&, const DeliverableType_CompositionPlaylistConstraintsType_ApplicationIdentificationListType&);

  ::std::ostream&
  operator<< (::std::ostream&, const DeliverableType_CompositionPlaylistConstraintsType_VirtualTrackListType&);

  ::std::ostream&
  operator<< (::std::ostream&, const VirtualTrackType_SoundfieldGroupConfigurationType_MCATagSymbolType&);

  ::std::ostream&
  operator<< (::std::ostream&, const VirtualTrackType_AudioChannelMappingType_AudioChannelType&);

  ::std::ostream&
  operator<< (::std::ostream&, const VirtualTrackType_EssenceEncodingConstraintListType_EssenceEncodingConstraintType&);

  ::std::ostream&
  operator<< (::std::ostream&, const VirtualTrackType_TimelineComplexityType_SequenceType&);

  ::std::ostream&
  operator<< (::std::ostream&, const VirtualTrackType_TimelineComplexityType_typeType&);

  ::std::ostream&
  operator<< (::std::ostream&, const DeliverableType_CompositionPlaylistConstraintsType_ApplicationIdentificationListType_MatchTypeType&);

  ::std::ostream&
  operator<< (::std::ostream&, const DeliverableType_CompositionPlaylistConstraintsType_ApplicationIdentificationListType_ValueListType&);

  ::std::ostream&
  operator<< (::std::ostream&, const VirtualTrackType_AudioChannelMappingType_AudioChannelType_MCATagSymbolType&);

  ::std::ostream&
  operator<< (::std::ostream&, const VirtualTrackType_EssenceEncodingConstraintListType_EssenceEncodingConstraintType_PropertyListType&);

  ::std::ostream&
  operator<< (::std::ostream&, const VirtualTrackType_TimelineComplexityType_SequenceType_ResourceType&);

  ::std::ostream&
  operator<< (::std::ostream&, const VirtualTrackType_EssenceEncodingConstraintListType_EssenceEncodingConstraintType_PropertyListType_PropertyType&);
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace dsl
{
  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::dsl::DeliverySpecificationList >
  parseDeliverySpecificationList (const ::std::string& uri,
                                  ::xml_schema::Flags f = 0,
                                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::auto_ptr< ::dsl::DeliverySpecificationList >
  parseDeliverySpecificationList (const ::std::string& uri,
                                  ::xml_schema::ErrorHandler& eh,
                                  ::xml_schema::Flags f = 0,
                                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::auto_ptr< ::dsl::DeliverySpecificationList >
  parseDeliverySpecificationList (const ::std::string& uri,
                                  ::xercesc::DOMErrorHandler& eh,
                                  ::xml_schema::Flags f = 0,
                                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::dsl::DeliverySpecificationList >
  parseDeliverySpecificationList (::std::istream& is,
                                  ::xml_schema::Flags f = 0,
                                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::auto_ptr< ::dsl::DeliverySpecificationList >
  parseDeliverySpecificationList (::std::istream& is,
                                  ::xml_schema::ErrorHandler& eh,
                                  ::xml_schema::Flags f = 0,
                                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::auto_ptr< ::dsl::DeliverySpecificationList >
  parseDeliverySpecificationList (::std::istream& is,
                                  ::xercesc::DOMErrorHandler& eh,
                                  ::xml_schema::Flags f = 0,
                                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::auto_ptr< ::dsl::DeliverySpecificationList >
  parseDeliverySpecificationList (::std::istream& is,
                                  const ::std::string& id,
                                  ::xml_schema::Flags f = 0,
                                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::auto_ptr< ::dsl::DeliverySpecificationList >
  parseDeliverySpecificationList (::std::istream& is,
                                  const ::std::string& id,
                                  ::xml_schema::ErrorHandler& eh,
                                  ::xml_schema::Flags f = 0,
                                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::auto_ptr< ::dsl::DeliverySpecificationList >
  parseDeliverySpecificationList (::std::istream& is,
                                  const ::std::string& id,
                                  ::xercesc::DOMErrorHandler& eh,
                                  ::xml_schema::Flags f = 0,
                                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::dsl::DeliverySpecificationList >
  parseDeliverySpecificationList (::xercesc::InputSource& is,
                                  ::xml_schema::Flags f = 0,
                                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::auto_ptr< ::dsl::DeliverySpecificationList >
  parseDeliverySpecificationList (::xercesc::InputSource& is,
                                  ::xml_schema::ErrorHandler& eh,
                                  ::xml_schema::Flags f = 0,
                                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::auto_ptr< ::dsl::DeliverySpecificationList >
  parseDeliverySpecificationList (::xercesc::InputSource& is,
                                  ::xercesc::DOMErrorHandler& eh,
                                  ::xml_schema::Flags f = 0,
                                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::dsl::DeliverySpecificationList >
  parseDeliverySpecificationList (const ::xercesc::DOMDocument& d,
                                  ::xml_schema::Flags f = 0,
                                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  ::std::auto_ptr< ::dsl::DeliverySpecificationList >
  parseDeliverySpecificationList (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                  ::xml_schema::Flags f = 0,
                                  const ::xml_schema::Properties& p = ::xml_schema::Properties ());
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace dsl
{
  // Serialize to std::ostream.
  //

  void
  serializeDeliverySpecificationList (::std::ostream& os,
                                      const ::dsl::DeliverySpecificationList& x, 
                                      const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                                      const ::std::string& e = "UTF-8",
                                      ::xml_schema::Flags f = 0);

  void
  serializeDeliverySpecificationList (::std::ostream& os,
                                      const ::dsl::DeliverySpecificationList& x, 
                                      ::xml_schema::ErrorHandler& eh,
                                      const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                                      const ::std::string& e = "UTF-8",
                                      ::xml_schema::Flags f = 0);

  void
  serializeDeliverySpecificationList (::std::ostream& os,
                                      const ::dsl::DeliverySpecificationList& x, 
                                      ::xercesc::DOMErrorHandler& eh,
                                      const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                                      const ::std::string& e = "UTF-8",
                                      ::xml_schema::Flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  serializeDeliverySpecificationList (::xercesc::XMLFormatTarget& ft,
                                      const ::dsl::DeliverySpecificationList& x, 
                                      const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                                      const ::std::string& e = "UTF-8",
                                      ::xml_schema::Flags f = 0);

  void
  serializeDeliverySpecificationList (::xercesc::XMLFormatTarget& ft,
                                      const ::dsl::DeliverySpecificationList& x, 
                                      ::xml_schema::ErrorHandler& eh,
                                      const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                                      const ::std::string& e = "UTF-8",
                                      ::xml_schema::Flags f = 0);

  void
  serializeDeliverySpecificationList (::xercesc::XMLFormatTarget& ft,
                                      const ::dsl::DeliverySpecificationList& x, 
                                      ::xercesc::DOMErrorHandler& eh,
                                      const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                                      const ::std::string& e = "UTF-8",
                                      ::xml_schema::Flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  serializeDeliverySpecificationList (::xercesc::DOMDocument& d,
                                      const ::dsl::DeliverySpecificationList& x,
                                      ::xml_schema::Flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  serializeDeliverySpecificationList (const ::dsl::DeliverySpecificationList& x, 
                                      const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                                      ::xml_schema::Flags f = 0);

  void
  operator<< (::xercesc::DOMElement&, const DeliverableType&);

  void
  operator<< (::xercesc::DOMElement&, const VirtualTrackType&);

  void
  operator<< (::xercesc::DOMElement&, const CardinalityType&);

  void
  operator<< (::xercesc::DOMElement&, const DeliverySpecificationList&);

  void
  operator<< (::xercesc::DOMElement&, const DeliverableType_LabelType&);

  void
  operator<< (::xercesc::DOMAttr&, const DeliverableType_LabelType&);

  void
  operator<< (::xml_schema::ListStream&,
              const DeliverableType_LabelType&);

  void
  operator<< (::xercesc::DOMElement&, const DeliverableType_CompositionPlaylistConstraintsType&);

  void
  operator<< (::xercesc::DOMElement&, const VirtualTrackType_SoundfieldGroupConfigurationType&);

  void
  operator<< (::xercesc::DOMElement&, const VirtualTrackType_AudioChannelMappingType&);

  void
  operator<< (::xercesc::DOMElement&, const VirtualTrackType_EssenceEncodingConstraintListType&);

  void
  operator<< (::xercesc::DOMElement&, const VirtualTrackType_ColorComponentsType&);

  void
  operator<< (::xercesc::DOMAttr&, const VirtualTrackType_ColorComponentsType&);

  void
  operator<< (::xml_schema::ListStream&,
              const VirtualTrackType_ColorComponentsType&);

  void
  operator<< (::xercesc::DOMElement&, const VirtualTrackType_PixelBitDepthListType&);

  void
  operator<< (::xercesc::DOMElement&, const VirtualTrackType_ImageFrameWidthListType&);

  void
  operator<< (::xercesc::DOMElement&, const VirtualTrackType_ImageFrameHeightListType&);

  void
  operator<< (::xercesc::DOMElement&, const VirtualTrackType_FrameRateListType&);

  void
  operator<< (::xercesc::DOMElement&, const VirtualTrackType_SampleRateListType&);

  void
  operator<< (::xercesc::DOMElement&, const VirtualTrackType_TimelineComplexityType&);

  void
  operator<< (::xercesc::DOMElement&, const VirtualTrackType_ReferenceCardinalityType&);

  void
  operator<< (::xercesc::DOMElement&, const VirtualTrackType_namespaceType&);

  void
  operator<< (::xercesc::DOMAttr&, const VirtualTrackType_namespaceType&);

  void
  operator<< (::xml_schema::ListStream&,
              const VirtualTrackType_namespaceType&);

  void
  operator<< (::xercesc::DOMElement&, const CardinalityType_MinItemType&);

  void
  operator<< (::xercesc::DOMAttr&, const CardinalityType_MinItemType&);

  void
  operator<< (::xml_schema::ListStream&,
              const CardinalityType_MinItemType&);

  void
  operator<< (::xercesc::DOMElement&, const CardinalityType_MaxItemType&);

  void
  operator<< (::xercesc::DOMAttr&, const CardinalityType_MaxItemType&);

  void
  operator<< (::xml_schema::ListStream&,
              const CardinalityType_MaxItemType&);

  void
  operator<< (::xercesc::DOMElement&, const DeliverySpecificationList_DeliverableListType&);

  void
  operator<< (::xercesc::DOMElement&, const DeliverableType_CompositionPlaylistConstraintsType_ApplicationIdentificationListType&);

  void
  operator<< (::xercesc::DOMElement&, const DeliverableType_CompositionPlaylistConstraintsType_VirtualTrackListType&);

  void
  operator<< (::xercesc::DOMElement&, const VirtualTrackType_SoundfieldGroupConfigurationType_MCATagSymbolType&);

  void
  operator<< (::xercesc::DOMAttr&, const VirtualTrackType_SoundfieldGroupConfigurationType_MCATagSymbolType&);

  void
  operator<< (::xml_schema::ListStream&,
              const VirtualTrackType_SoundfieldGroupConfigurationType_MCATagSymbolType&);

  void
  operator<< (::xercesc::DOMElement&, const VirtualTrackType_AudioChannelMappingType_AudioChannelType&);

  void
  operator<< (::xercesc::DOMElement&, const VirtualTrackType_EssenceEncodingConstraintListType_EssenceEncodingConstraintType&);

  void
  operator<< (::xercesc::DOMElement&, const VirtualTrackType_TimelineComplexityType_SequenceType&);

  void
  operator<< (::xercesc::DOMElement&, const VirtualTrackType_TimelineComplexityType_typeType&);

  void
  operator<< (::xercesc::DOMAttr&, const VirtualTrackType_TimelineComplexityType_typeType&);

  void
  operator<< (::xml_schema::ListStream&,
              const VirtualTrackType_TimelineComplexityType_typeType&);

  void
  operator<< (::xercesc::DOMElement&, const DeliverableType_CompositionPlaylistConstraintsType_ApplicationIdentificationListType_MatchTypeType&);

  void
  operator<< (::xercesc::DOMAttr&, const DeliverableType_CompositionPlaylistConstraintsType_ApplicationIdentificationListType_MatchTypeType&);

  void
  operator<< (::xml_schema::ListStream&,
              const DeliverableType_CompositionPlaylistConstraintsType_ApplicationIdentificationListType_MatchTypeType&);

  void
  operator<< (::xercesc::DOMElement&, const DeliverableType_CompositionPlaylistConstraintsType_ApplicationIdentificationListType_ValueListType&);

  void
  operator<< (::xercesc::DOMElement&, const VirtualTrackType_AudioChannelMappingType_AudioChannelType_MCATagSymbolType&);

  void
  operator<< (::xercesc::DOMAttr&, const VirtualTrackType_AudioChannelMappingType_AudioChannelType_MCATagSymbolType&);

  void
  operator<< (::xml_schema::ListStream&,
              const VirtualTrackType_AudioChannelMappingType_AudioChannelType_MCATagSymbolType&);

  void
  operator<< (::xercesc::DOMElement&, const VirtualTrackType_EssenceEncodingConstraintListType_EssenceEncodingConstraintType_PropertyListType&);

  void
  operator<< (::xercesc::DOMElement&, const VirtualTrackType_TimelineComplexityType_SequenceType_ResourceType&);

  void
  operator<< (::xercesc::DOMElement&, const VirtualTrackType_EssenceEncodingConstraintListType_EssenceEncodingConstraintType_PropertyListType_PropertyType&);
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // IMF_DELIVERY_SCHEMA_H
